document.addEventListener('DOMContentLoaded', function() {
    // Form elements
    const htaccessForm = document.getElementById('htaccessForm');
    const preventDirectoryListing = document.getElementById('preventDirectoryListing');
    const protectHtaccess = document.getElementById('protectHtaccess');
    const disableServerSignature = document.getElementById('disableServerSignature');
    const wwwRedirect = document.getElementById('wwwRedirect');
    const httpsRedirect = document.getElementById('httpsRedirect');
    const enableGzip = document.getElementById('enableGzip');
    const enableBrowserCaching = document.getElementById('enableBrowserCaching');
    const customRules = document.getElementById('customRules');
    
    // Output elements
    const htaccessOutput = document.getElementById('htaccessOutput');
    const generationStatus = document.getElementById('generationStatus');
    const generateBtn = document.getElementById('generateBtn');
    const clearBtn = document.getElementById('clearBtn');
    const copyBtn = document.getElementById('copyBtn');
    const downloadBtn = document.getElementById('downloadBtn');

    // Generate .htaccess content
    function generateHtaccess() {
        let content = '# Generated by Multi-Tools Hub .htaccess Generator\n\n';
        
        // Security rules
        if (preventDirectoryListing.checked) {
            content += '# Prevent directory listing\n';
            content += 'Options -Indexes\n\n';
        }
        
        if (protectHtaccess.checked) {
            content += '# Protect .htaccess file\n';
            content += '<Files .htaccess>\n';
            content += '    Order allow,deny\n';
            content += '    Deny from all\n';
            content += '</Files>\n\n';
        }
        
        if (disableServerSignature.checked) {
            content += '# Disable server signature\n';
            content += 'ServerSignature Off\n\n';
        }
        
        // Redirect rules
        if (wwwRedirect.value !== 'none') {
            content += '# WWW to non-WWW redirect\n';
            if (wwwRedirect.value === 'to-www') {
                content += 'RewriteEngine On\n';
                content += 'RewriteCond %{HTTP_HOST} !^www\\. [NC]\n';
                content += 'RewriteRule ^(.*)$ http://www.%{HTTP_HOST}/$1 [R=301,L]\n\n';
            } else {
                content += 'RewriteEngine On\n';
                content += 'RewriteCond %{HTTP_HOST} ^www\\.(.*)$ [NC]\n';
                content += 'RewriteRule ^(.*)$ http://%1/$1 [R=301,L]\n\n';
            }
        }
        
        if (httpsRedirect.value === 'force-https') {
            content += '# Force HTTPS\n';
            content += 'RewriteEngine On\n';
            content += 'RewriteCond %{HTTPS} off\n';
            content += 'RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]\n\n';
        }
        
        // Performance rules
        if (enableGzip.checked) {
            content += '# Enable GZIP compression\n';
            content += '<IfModule mod_deflate.c>\n';
            content += '    AddOutputFilterByType DEFLATE text/plain\n';
            content += '    AddOutputFilterByType DEFLATE text/html\n';
            content += '    AddOutputFilterByType DEFLATE text/xml\n';
            content += '    AddOutputFilterByType DEFLATE text/css\n';
            content += '    AddOutputFilterByType DEFLATE application/xml\n';
            content += '    AddOutputFilterByType DEFLATE application/xhtml+xml\n';
            content += '    AddOutputFilterByType DEFLATE application/rss+xml\n';
            content += '    AddOutputFilterByType DEFLATE application/javascript\n';
            content += '    AddOutputFilterByType DEFLATE application/x-javascript\n';
            content += '</IfModule>\n\n';
        }
        
        if (enableBrowserCaching.checked) {
            content += '# Enable browser caching\n';
            content += '<IfModule mod_expires.c>\n';
            content += '    ExpiresActive On\n';
            content += '    ExpiresByType image/jpg "access plus 1 year"\n';
            content += '    ExpiresByType image/jpeg "access plus 1 year"\n';
            content += '    ExpiresByType image/gif "access plus 1 year"\n';
            content += '    ExpiresByType image/png "access plus 1 year"\n';
            content += '    ExpiresByType text/css "access plus 1 month"\n';
            content += '    ExpiresByType application/pdf "access plus 1 month"\n';
            content += '    ExpiresByType text/javascript "access plus 1 month"\n';
            content += '    ExpiresByType application/javascript "access plus 1 month"\n';
            content += '    ExpiresByType application/x-javascript "access plus 1 month"\n';
            content += '    ExpiresByType application/x-shockwave-flash "access plus 1 month"\n';
            content += '    ExpiresByType image/x-icon "access plus 1 year"\n';
            content += '    ExpiresDefault "access plus 2 days"\n';
            content += '</IfModule>\n\n';
        }
        
        // Add custom rules if provided
        if (customRules.value.trim() !== '') {
            content += '# Custom rules\n';
            content += customRules.value.trim() + '\n\n';
        }
        
        return content;
    }

    // Show generation status
    function showGenerationStatus(message, isError = false) {
        generationStatus.innerHTML = isError
            ? `<div class="alert alert-danger">${message}</div>`
            : `<div class="alert alert-success">${message}</div>`;
    }

    // Generate button click handler
    generateBtn.addEventListener('click', () => {
        try {
            const content = generateHtaccess();
            htaccessOutput.textContent = content;
            showGenerationStatus('.htaccess file generated successfully!');
        } catch (error) {
            showGenerationStatus('Error generating .htaccess file: ' + error.message, true);
            console.error('Generation error:', error);
        }
    });

    // Clear button click handler
    clearBtn.addEventListener('click', () => {
        htaccessForm.reset();
        htaccessOutput.textContent = '';
        generationStatus.innerHTML = '';
    });

    // Copy button click handler
    copyBtn.addEventListener('click', () => {
        if (htaccessOutput.textContent) {
            navigator.clipboard.writeText(htaccessOutput.textContent)
                .then(() => {
                    const originalText = copyBtn.innerHTML;
                    copyBtn.innerHTML = '<i class="fas fa-check"></i> Copied!';
                    setTimeout(() => {
                        copyBtn.innerHTML = originalText;
                    }, 2000);
                })
                .catch(err => {
                    console.error('Failed to copy text: ', err);
                });
        }
    });

    // Download button click handler
    downloadBtn.addEventListener('click', () => {
        if (htaccessOutput.textContent) {
            const blob = new Blob([htaccessOutput.textContent], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = '.htaccess';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
        }
    });

    // Add input event listeners for real-time generation
    const formElements = [
        preventDirectoryListing,
        protectHtaccess,
        disableServerSignature,
        wwwRedirect,
        httpsRedirect,
        enableGzip,
        enableBrowserCaching,
        customRules
    ];

    formElements.forEach(element => {
        element.addEventListener('change', () => {
            if (htaccessOutput.textContent) {
                generateBtn.click();
            }
        });
    });
}); 